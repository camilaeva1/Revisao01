#Imprime o tipo de variavel
print(type(5))
d = 3
c = 2
b = 4
d = c + d
a = d + 1
a = a + 1
print(a)
#Função print
print("Égua de novo isso")
# Escrevendo o valor de uma variável e imprimindo
print("A variável contem o valor ", a)
e = 10
f = 3.14
print("e contem o valor ", e," e f contêm o valor", f)
print("O e tem o valor "+ str(e) + " e o f tem valor "+ str(f))
#formatação da exibição para ponto flutuante
pi = 3.1415
r = 7
area = pi * r * r
print("Área do círculo de raio %.2f " %r +"é %.2f" %area)
#Como exibir na tela sem pula linha
print("3, ", end ="")
print("4, ", end ="")
print("5, ")
#A função input
print("Informe um numero: ")
num = input()
print("O número digitado foi ", num)
#Função input
n1 = float(input("Digite um número: "))
n2 = float(input("Digite outro número: "))
print("A soma de {} e {} é: {}".format(n1, n2, n1 + n2))
#Expressões, // operação truncada
n = n2//n1
print(n)
#// Imprime só a parte inteira
n = 87426//3600
#O resultado é 24,2848
print(n)
#% imprime o resto da divisão
a = 5%2
#resta 1
print(a)
#Exercício de aula: converter em horas, minutos e segundos, 87426 segundos
tempo = int(input("Insira a quantidade de segundos que deseja converter: "))
horas = tempo//3600
resto1 = tempo%3600
print(resto1)
minutos = resto1//60
resto2 = minutos%60
print("87426 segundos equivalem a {} h, {} min e {} seg".format(horas, minutos, resto2))
#Expressões relacionais: fazem uma comparação entre duas expressões e retornam true ou false
a = True
print(type(a))
#imprime <class 'bool'>
#Operadores relacionais: == (igual), != (diferente), > maior que, >= maior ou igual que, < menor que, <= menor ou igual que
#Expressões lógicas: realizam operações lógicas (e, ou, não...), and, or, not
print(8 > 9 and 10 != 2)
print(14 > 100 or 2 > 1)
print(not(14 > 100) and not (1 > 2))
#Comandos condicionais(if, elif, else)
#Atribuições compostas
n = 6
n += 1
print(n)
n *= 2
print(n)
n /= 7
print(n)
n *= 5
print(n)
n %= 3
print(n)
#Comando while
num = 1
while num <= 100:
  print(num)
  num += 1
#Programa imprime os n primeiros numeros
n = int(input("digite um número: "))
numero = 1
while numero <= n:
  print(numero)
  numero += 1
print("fim")
#Listas
lista = ["Olá", 9.9, 5, -3, [10, 20]]
#Acesso a uma posição na lista
print(lista[0])
#Comando for é muito usado com listas
l = ["Camila", 1, 2, 3, 77]
for item in l:
  print(item)
for k in range(100):
  print(k)
for letra in "python":
  print(letra)
#função range
for n in range(10):
  print(n)
for i in range(5, 9):
  print(i)
#função range com passo:
for i in range(0, 13, 2):
  print(i)
#Usar for ou while? Use o for quando vc sabe quantas vezes vai precisar executar o comando dentro do laço, use em listas. Use o whle se precisa realizar algum comando até que seja alcançada a condição ideal(não sabemos quantas execuções vamos precisar pra chegar nessa condição)
#Jogo de adivinhação
import random
numero = random.randrange(1, 100)
print(numero)
palpite = 1
meupalpite = int(input("Qual seu palpite? "))
while meupalpite != numero:
  palpite += 1
  if meupalpite > numero:
    print("Seu palpite está acima do número!")
  elif meupalpite < numero:
    print("Seu palpite está abaixo do número!")
  meupalpite = int(input("Tente novamente! Qual seu palpite? "))
print("Você acertou, parabéns!")
#Programa que some n números que o usuário vai inserir
cont = 0
n = int(input("Digite quantos números vc vai inserir: "))
for i in range(n):
  aux = int(input("Digite um número: "))
  cont = cont + aux
print(cont)

#O comando brak interrompe o laço while ou for passando pra execução do próximo comando (vejo mais no while)
for numero in range(1, 10):
  print(numero)
  if numero >= 5:
    break
print("terminou o laço")
numero = 1
while numero <= 10:
  if numero == 5:
    numero += 1
    continue
  print(numero)
  numero += 1

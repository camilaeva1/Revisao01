#Imprime o tipo de variavel
print(type(5))
d = 3
c = 2
b = 4
d = c + d
a = d + 1
a = a + 1
print(a)
#Função print
print("Égua de novo isso")
# Escrevendo o valor de uma variável e imprimindo
print("A variável contem o valor ", a)
e = 10
f = 3.14
print("e contem o valor ", e," e f contêm o valor", f)
print("O e tem o valor "+ str(e) + " e o f tem valor "+ str(f))
#formatação da exibição para ponto flutuante
pi = 3.1415
r = 7
area = pi * r * r
print("Área do círculo de raio %.2f " %r +"é %.2f" %area)
#Como exibir na tela sem pula linha
print("3, ", end ="")
print("4, ", end ="")
print("5, ")
#A função input
print("Informe um numero: ")
num = input()
print("O número digitado foi ", num)
#Função input
n1 = float(input("Digite um número: "))
n2 = float(input("Digite outro número: "))
print("A soma de {} e {} é: {}".format(n1, n2, n1 + n2))
#Expressões, // operação truncada
n = n2//n1
print(n)
#// Imprime só a parte inteira
n = 87426//3600
#O resultado é 24,2848
print(n)
#% imprime o resto da divisão
a = 5%2
#resta 1
print(a)
#Exercício de aula: converter em horas, minutos e segundos, 87426 segundos
tempo = int(input("Insira a quantidade de segundos que deseja converter: "))
horas = tempo//3600
resto1 = tempo%3600
print(resto1)
minutos = resto1//60
resto2 = minutos%60
print("87426 segundos equivalem a {} h, {} min e {} seg".format(horas, minutos, resto2))
#Expressões relacionais: fazem uma comparação entre duas expressões e retornam true ou false
a = True
print(type(a))
#imprime <class 'bool'>
#Operadores relacionais: == (igual), != (diferente), > maior que, >= maior ou igual que, < menor que, <= menor ou igual que
#Expressões lógicas: realizam operações lógicas (e, ou, não...), and, or, not
print(8 > 9 and 10 != 2)
print(14 > 100 or 2 > 1)
print(not(14 > 100) and not (1 > 2))
#Comandos condicionais(if, elif, else)
#Atribuições compostas
n = 6
n += 1
print(n)
n *= 2
print(n)
n /= 7
print(n)
n *= 5
print(n)
n %= 3
print(n)
#Comando while
num = 1
while num <= 100:
  print(num)
  num += 1
#Programa imprime os n primeiros numeros
n = int(input("digite um número: "))
numero = 1
while numero <= n:
  print(numero)
  numero += 1
print("fim")
#Listas
lista = ["Olá", 9.9, 5, -3, [10, 20]]
#Acesso a uma posição na lista
print(lista[0])
#Comando for é muito usado com listas
l = ["Camila", 1, 2, 3, 77]
for item in l:
  print(item)
for k in range(100):
  print(k)
for letra in "python":
  print(letra)
#função range
for n in range(10):
  print(n)
for i in range(5, 9):
  print(i)
#função range com passo:
for i in range(0, 13, 2):
  print(i)
#Usar for ou while? Use o for quando vc sabe quantas vezes vai precisar executar o comando dentro do laço, use em listas. Use o whle se precisa realizar algum comando até que seja alcançada a condição ideal(não sabemos quantas execuções vamos precisar pra chegar nessa condição)
#Jogo de adivinhação
import random
numero = random.randrange(1, 100)
print(numero)
palpite = 1
meupalpite = int(input("Qual seu palpite? "))
while meupalpite != numero:
  palpite += 1
  if meupalpite > numero:
    print("Seu palpite está acima do número!")
  elif meupalpite < numero:
    print("Seu palpite está abaixo do número!")
  meupalpite = int(input("Tente novamente! Qual seu palpite? "))
print("Você acertou, parabéns!")
#Programa que some n números que o usuário vai inserir
cont = 0
n = int(input("Digite quantos números vc vai inserir: "))
for i in range(n):
  aux = int(input("Digite um número: "))
  cont = cont + aux
print(cont)

#O comando brak interrompe o laço while ou for passando pra execução do próximo comando (vejo mais no while)
for numero in range(1, 10):
  print(numero)
  if numero >= 5:
    break
print("terminou o laço")
numero = 1
while numero <= 10:
  if numero == 5:
    numero += 1
    continue
  print(numero)
  numero += 1
#Faça um programa que le um numero inteiro positivo n e imprima os valores entre 2 e n que são divisores de n:
n = int(input("Insira um número inteiro e positivo: "))
for i in range(2, n+1):
  if n%i == 0:
    print(i, end= ', ')
 
 #função enumerate
nomes = ['RICARDO', 'CARMEN0', 'CARLA', 'CAMILA', 'CÁSSIA', 'NETO', 'MIGUEL', 'LUÍSA']
for par in enumerate(nomes):
  print(par)
#A função zip junta duas listas e cria uma tupla relacionando os elementos
nom = ['MESSI', 'JR', 'PATO']
gol = [3, 4, 1]
for n, g in zip(nom, gol):
  print("%s FEZ %d GOLs" %(n, g), end = ', ')
notas = [9.0, 8.6, 7.8, 10.0, 9.9]
for n in range(5):
  print(notas[n])

#Muito importante cortar uma lista = função slicing
print(notas[1: 3])

#Append acrescenta um item no final da lista
notas.append(6.9)
print(notas)
notas1 = []
n = int(input("Quantas notas serão inseridas? "))
for i in range(n):
  nota = float(input("Insira a nota: "))
  notas1.append(nota)
print(notas1)


#O insert insere um elemento numa lista na posição escolhida, assim:
n = [10, 40, 0, 5]
n.insert(1, "casa")
print(n)

#O del remove da lista um elemento
del n[0]
print(n)

#mesma coisa o remove, mas aí ele procura o valor a ser removido independente da posição:
n.remove(5)
print(n)

#Faça um programa que leia n notas e que imprima a metade da média das notas
q = int(input("digite quantos valores vc irá inserir: "))
lista = []
cont = 0
for n in range(q):
  valor = float(input("Insira o valor: "))
  lista.append(valor)
  cont = cont + valor
print(lista)
print(cont)
print(cont/2)

#função sort, coloca a lista em ordem crescente

lista = [5, 7, 10, 99, 1]
lista.sort()
print(lista)
lista.reverse()
print(lista)
print(sorted(lista))
print(lista[: -2])


lista1 = [1,1,1,2,4,3,3,7,7,8,9,9]
#Encontrando o valor mais frequente
maisfrequente = max(set(lista1), key = lista1.count)
print(maisfrequente)

#Encontrando o maior
maior = max(lista1)
print(maior)

#Tirar itens repetidos numa lista, trabalha nela como um dicionário
lista1 = list(dict.fromkeys(lista1))
print(lista1)


#MUITO IMPORTANTE!!!!!!!!!!!!!!!!!!!!!!!
#SALVAR EM CSV

import csv
colunas = ['PEIXE', 'PESO', 'BARRACA', 'VALOR POR KG']
linhas = [['TAMABQUI', 3.2, '45', 20.4], ['PIRARUCU', 4.5, '63', 30], ['FILHOTE', 10.5, '54', 21]]
with open('GFC.csv', 'w') as f:
  write = csv.writer(f)
  write.writerow(colunas)
  write.writerow(linhas)


#Laços encaixados

c = int(input("Insira c: "))
for x1 in range(0, c+1):
  for x2 in range(0, c+1):
    if (x1 + x2) == c:
      print(x1, " + ", x2, " = ", c)

#TUPLAS E DICIONÁRIOS
#Por convenção se usa (), e são imutáveis
#Criação de tuplas: T1 = ()
t1 = (50,)
print(type(t1))
t2 = (3, 2, 7, 4, 1)
t3 = ('a', 'b', 'c', 'd')
t4 = t2 + t3
print(t4)
print(max(t2))
#Empacotar e desempacotar

qtd = 1.1
nome = "carne"
preco = 22.9
c = (nome, preco, qtd,)

compras_e = [("arroz", 3.49, 3), ("feijao", 2.99, 2), ("tomate", 1.99, 0.8)]
for nome_prod, preco, qtdade in compras_e:
  print(f"Nome: {nome_prod}\tPreço: {preco}\tQuantidade: {qtdade}")
  
 
 
 crg = {"Wanderley": 5.4, "Joelma": 9.8, "Onete": 8.5}
print(type(crg))
print(crg["Joelma"])
print(crg)
crg["Joelma"] = 4.6
print(crg)
for x in crg:
  print(x)
for x in crg.values():
  print(x)
d = {'a': 0, 'b':1, 'c':2}
t = d.items()
print(t)
